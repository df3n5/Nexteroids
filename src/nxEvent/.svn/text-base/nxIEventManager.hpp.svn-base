#ifndef  NXIEVENTMANAGER_H
#define  NXIEVENTMANAGER_H

#include <map>
#include <utility>
#include <list>

using namespace std;

#include <nxCore/nxCore.hpp>
#include <nxEvent/nxEventType.hpp>
#include <nxEvent/nxIEventListener.hpp>
#include <nxEvent/nxIEventData.hpp>

typedef boost::shared_ptr<nxIEventData> nxIEventDataPtr;
typedef boost::shared_ptr<nxIEventListener> nxEventListenerPtr;
//typedef boost::shared_ptr< nxIRegisteredEvent > nxRegisteredEventPtr;

// Use this event type to register a listener that receives ( but
// never eats ) all events that pass through the system. It is
// special in that if the type ident str that is passed in
// matches this, then the ident value is set to zero.
char const * const NX_IEVENT_MANAGER_K_PWILDCARD_EVENT_TYPE = "*";

class nxIEventManager
{
	public:
		enum nxIEventManagerConstants
		{
			NX_IEVENT_MANAGER_K_INFINITE = 0xffffffff
		};

		virtual bool VAddListener ( nxEventListenerPtr const & inHandler,
									nxEventType const & inType ) = 0;

		virtual bool VDelListener ( nxEventListenerPtr const & inHandler,
									nxEventType const & inType ) = 0;

		virtual bool VTrigger ( nxIEventData const & inEvent ) const = 0;

		virtual bool VQueueEvent ( nxIEventDataPtr const & inEvent ) = 0;

		virtual bool VAbortEvent ( nxEventType const & inType,
									bool allOfType = false ) = 0;

		virtual bool VTick ( unsigned long maxMillis = NX_IEVENT_MANAGER_K_INFINITE ) = 0;

		virtual bool VValidateType( nxEventType const & inType ) const = 0;

	protected:

		nxIEventManager();

		virtual ~nxIEventManager();

	private:
};

#endif   // NXIEVENTMANAGER_H
