#ifndef  NXEVENTMANAGER_H
#define  NXEVENTMANAGER_H

#include <vector>
#include <set>

#include <nxCore/nxCore.hpp>
#include <nxEvent/nxIEventManager.hpp>
#include <nxEvent/nxEventType.hpp>
#include <nxEvent/nxIEventData.hpp>
#include <jfTimer/jfFPSTimer.hpp>

//Typedefs so that things don't get messy.
typedef std::set< nxEventType > nxEventTypeSet;

//typedef std::map< nxEventType, nxIRegisteredEventPtr > nxRegisteredEventTypeMap;
typedef std::pair< nxEventTypeSet::iterator, bool >	nxEventTypeMapInsertRes;
typedef std::list< nxEventListenerPtr > nxEventListenerTable;

typedef std::map< unsigned int, nxEventListenerTable > nxEventListenerMap;
typedef std::pair< unsigned int, nxEventListenerTable >	nxEventListenerMapEnt;
typedef std::pair< nxEventListenerMap::iterator, bool >	nxEventListenerMapInsertRes;

typedef std::vector<nxEventListenerPtr> nxEventListenerList;
typedef std::vector<nxEventType> nxEventTypeList;
typedef std::pair< nxEventListenerMap::iterator, bool >	nxEventListenerMapInsertRes;

typedef std::list< nxIEventDataPtr > nxEventDataTable;

typedef boost::shared_ptr<nxIEventData> nxEventPtr;
typedef std::list< nxEventPtr > nxEventQueue;

//TODO:For multithreaded version
//typedef concurrent_queue<nxIEventDataPtr> ThreadSafeEventQueue;

/*
 * =====================================================================================
 *        Class: nxEventManager
 *  Description:
 * =====================================================================================
 */
class nxEventManager : public nxIEventManager
{
	public:

		static nxEventManager& GetInstance();

		enum nxEventManagerConstants
		{
			NX_EVENT_MANAGER_K_NQUEUES = 2,
			NX_EVENT_MANAGER_GLOBAL_LISTENER_IDX = 0
		};

		bool IsListenerInTable(nxEventListenerPtr listener, nxEventListenerTable& listenerTable);

		nxEventListenerMap::iterator FindAndAddListenerMapEntry(nxEventListenerMap::iterator listenerMapEntry, nxEventType eventType);

		virtual bool VAddListener ( nxEventListenerPtr const & inHandler,
				nxEventType const & inType );

		virtual bool VDelListener ( nxEventListenerPtr const & inHandler,
				nxEventType const & inType );

		virtual bool VTrigger ( nxIEventData const & inEvent ) const;

		virtual bool VQueueEvent ( nxIEventDataPtr const & inEvent );

		virtual bool VAbortEvent ( nxEventType const & inType,
				bool allOfType = false );

		virtual bool VTick ( unsigned long maxMillis = NX_IEVENT_MANAGER_K_INFINITE);

		virtual bool VValidateType( nxEventType const & inType ) const;

		nxEventListenerList GetListenerList (
                nxEventType const & eventType ) const;

	protected:

		static nxEventManager m_Instance;

		nxEventManager();

		virtual ~nxEventManager();

		nxEventTypeSet m_EventTypes;

		nxEventListenerMap m_ListenerRegistry;

		nxEventQueue m_EventQueues[NX_EVENT_MANAGER_K_NQUEUES];

		int m_ActiveQueue;

	private:
};


#endif   // NXEVENTMANAGER_H
