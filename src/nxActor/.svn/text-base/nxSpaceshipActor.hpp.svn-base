#ifndef  NXSPACESHIPACTOR_H
#define  NXSPACESHIPACTOR_H

#include <nxCore/nxCore.hpp>
#include <nxCore/nxMath.hpp>
#include <nxCore/nxTypes.hpp>
#include <nxActor/nxBaseActor.hpp>
#include <nxGeom/nxPoint3.hpp>
#include <nxGameLogic/nxBaseGameLogic.hpp>

/*
 * =====================================================================================
 *        Class: nxSpaceshipActor
 *  Description:
 * =====================================================================================
 */
class nxSpaceshipActor : public nxBaseActor
{
	public:

		nxSpaceshipActor();

		nxSpaceshipActor(nxReal yrot, nxPoint3 pos);

		virtual ~nxSpaceshipActor();

		virtual void VInit(stringstream& in)
		{
			nxBaseActor::VInit(in);

			in >> m_Radius;

			in >> m_Colour.r;
			in >> m_Colour.g;
			in >> m_Colour.b;
			in >> m_Colour.alpha;
		}

		virtual void VSerialize(stringstream& out)
		{
			nxBaseActor::VSerialize(out);

			out << m_Radius << " ";

			out << m_Colour.r << " ";
			out << m_Colour.g << " ";
			out << m_Colour.b << " ";
			out << m_Colour.alpha << " ";
		}

		virtual nxSpaceshipActor* VClone()
		{
//			return new nxSpaceshipActor(*this);
			nxSpaceshipActor* result = new nxSpaceshipActor(m_Orientation, m_Pos);
			result->VSetRadius(m_Radius);
			result->VSetColour(m_Colour);
			result->VSetViewId(m_ViewId);
			result->VSetId(m_Id);
			return result;
		}

		virtual void VOnUpdate(int deltaMilliseconds)
		{
			//TODO : Integration
		}

		virtual void VCreate() 
		{
//			m_Pos.SetX(20);
//			m_Pos.SetY(10);
//			m_Orientation = NX_PI_OVER_2; //XXX:Magic Number, should be random?
//			m_Radius = 3.0f; //XXX : Magic number
			//TODO : Get triangle shape working. 
/*
			shared_ptr<nxIActor> pActor(this);
			logic->VAddActor(pActor);
			//TODO:Add physics
			logic->VGetGamePhysics()->VCreateSphere(m_Radius, pActor);

			return pActor;
			*/
		}

		virtual nxReal GetRadius() const
		{
			return m_Radius;
		}

		virtual void VSetRadius(float val)
		{
			m_Radius = val;
		}

		virtual void VSetColour(nxColour colour)
		{
			m_Colour = colour;
		}

		virtual nxColour VGetColour() const
		{
			return m_Colour;
		}
		
	protected:
		nxReal m_Radius;
		nxColour m_Colour;
	private:
};


#endif   // NXSPACESHIPACTOR_H
