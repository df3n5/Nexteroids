#ifndef  NXBASEACTOR_H
#define  NXBASEACTOR_H

#include <Box2D/Box2D.h>

#include <nxCore/nxCore.hpp>
#include <nxCore/nxTypes.hpp>
#include <nxActor/nxIActor.hpp>
#include <nxGeom/nxPoint3.hpp>

/*
 * =====================================================================================
 *        Class: nxBaseActor
 *  Description:
 * =====================================================================================
 */
class nxBaseActor : public nxIActor
{
	public:

		nxBaseActor(nxActorType type)
			:
				m_Type(type)
		{
		}

		nxBaseActor(nxReal yrot, nxPoint3 pos, nxActorType type)
			:
				m_Orientation(yrot),
				m_Type(type)
		{
			m_Pos = pos;
		}

		nxBaseActor(const nxBaseActor& other)
			:
				m_Orientation(other.VGetOrientation()),
				m_Type(other.VGetType())
		{
			m_Pos = other.VGetPos();
			m_Id = other.VGetId();
			m_ViewId = other.VGetViewId();
		}

		virtual ~nxBaseActor()
		{
		}


		virtual void VInit(stringstream& in)
		{
			//Type has already been decided.
			/*
			int typeInt;
			in >> typeInt;
			m_Type = (nxActorType)typeInt;
			*/

			in >> m_Orientation;

			in >> m_Id;

			in >> m_ViewId;

			m_Pos.VInit(in);
		}

		virtual void VSerialize(stringstream& out)
		{
			int typeInt = (int)m_Type;
			out << typeInt << " ";

			out << m_Orientation << " ";

			out << m_Id << " ";

			out << m_ViewId << " ";

			m_Pos.VSerialize(out);
		}

		virtual void VOnUpdate(int deltaMilliseconds)
		{
		}

		virtual void VRotate(nxReal angleRadians)
		{
			m_Orientation += angleRadians;
		}

		virtual void VSetOrientation(float val)
		{
			m_Orientation = val;
		}

		virtual void VSetPos(nxPoint3 val)
		{
			m_Pos = val;
		}

		virtual void VSetPos(b2Vec2 val)
		{
			m_Pos.SetX(val.x);
			m_Pos.SetY(val.y);
		}

		virtual void VSetViewId(nxGameViewId val)
		{
			m_ViewId = val;
		}

		virtual void VSetId(nxActorId id)
		{
			m_Id = id;
		}

		/*
		virtual void VSetBody(b2Body* body)
		{
			m_Body = body;
		}
		*/

		virtual nxActorType VGetType() const
		{
			return m_Type;
		}

		//Up to subclasses to define what speed is
		virtual float VGetSpeed() const
		{
			return 0;
		}

		virtual nxReal VGetOrientation() const
		{
			return m_Orientation;
		}

		virtual nxActorId VGetId() const
		{
			return m_Id;
		}

		virtual nxGameViewId VGetViewId() const
		{
			return m_ViewId;
		}

		virtual nxPoint3 VGetPos() const
		{
			return m_Pos;
		}

		//Static method called to create an actor from a stream.
		static nxIActor* CreateFromStream(stringstream &in);

	protected:
		nxActorType m_Type;
		nxReal m_Orientation;
		nxPoint3 m_Pos;
		nxActorId m_Id;
		nxGameViewId m_ViewId;
//		b2Body* m_Body;

	private:
};


#endif   // NXBASEACTOR_H
