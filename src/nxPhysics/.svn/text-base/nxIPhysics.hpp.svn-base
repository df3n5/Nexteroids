
#ifndef  NXIPHYSICS_H
#define  NXIPHYSICS_H

#include <jfpx/x86/jfVector3_x86.h>

#include <nxActor/nxIActor.hpp>
#include <nxCore/nxCore.hpp>

/*
 * =====================================================================================
 *        Class: nxIPhysics
 *  Description:
 * =====================================================================================
 */
class nxIPhysics
{
	public:
		virtual ~nxIPhysics() { }

		virtual void VInit() = 0;

//		virtual void VOnUpdate(int deltaMilliseconds) = 0;

		virtual void VOnUpdate(float timestep) = 0;

//		virtual void VSyncVisibleScene() = 0;

		virtual void VRenderDiagnostics() = 0;

//		virtual void VCreateSphere(float radius, nxISceneNode* actor);
//		virtual void VCreateSphere(float radius, shared_ptr<nxIActor> actor) = 0;
		virtual void VCreateActor(shared_ptr<nxIActor> actor) = 0;
//		virtual void VCreateSphere(float radius, ISceneNode	*sceneNode)=0;

//		virtual void VCreateTrigger(Vec3 const &pos, float dim, int	triggerID)=0;

//		virtual void VRemoveActor(nxActorId) = 0;
		virtual void VRemoveActor(nxActorId) = 0;

		virtual void VApplyThrottle(nxActorId actorId, float throttle) = 0;

		virtual void VApplySteering(nxActorId actorId, float steering) = 0;

	protected:
	private:
};


#endif   // NXIPHYSICS_H
